extends layout

block content
  script(type='text/javascript', src='/GoJS-1.8.26/release/go.js')
  script(type='text/javascript', src='/GoJS-1.8.26/extensions/HyperlinkText.js')
  //script(type='text/javascript', src='/GoJS-1.8.26/assets/js/goSamples.js')
  // this is only for the GoJS Samples framework 
  if account.isContract
    h3 Contract #{account.address}
  else
    h3 Account #{account.address}
  table.table
    tr
      td
        h3 Balance:
      td
        h3 #{ethformatter(account.balance)}
    if account.name
      tr
        td Name:
        td #{account.name}
    tr
      td Block Range:
      td 
        if account.previousBlockNumber > 999
          a.btn.btn-primary.btn-sm(href="/account/" + account.address + "/" + account.previousBlockNumber, style="padding: 4px;") Previous
          | &nbsp;&nbsp;&nbsp;&nbsp;from:#{account.fromBlock} ~ to:#{account.lastBlock} 정보 추출 범위 &nbsp;&nbsp;&nbsp;&nbsp;
          //a.btn.btn-primary.btn-sm(href="/account/" + account.address + "/" + account.nextBlockNumber, style="padding: 4px;") Lastest
          a.btn.btn-primary.btn-sm(href="/account/" + account.address, style="padding: 4px;") Lastest
        else
          |from:#{account.fromBlock} ~ to:#{account.lastBlock} 정보 추출 범위 &nbsp;&nbsp;&nbsp;&nbsp;
          a.btn.btn-primary.btn-sm(href="/account/" + account.address, style="padding: 4px;") Lastest
    tr
      td More Infomation:
      td
        a(href=account.officialurl target='_blank') Official BlockExplorer(Previous information) 공식 익스플로러(범위 이전 정보 조회)
  div
    ul.nav.nav-tabs(role='tablist')
      li.active(role='presentation')
        a(href='#tracemap', aria-controls='tracemap', role='tab', data-toggle='tab') Transactions Tracing
      li(role='presentation')
        a(href='#transactions', aria-controls='transactions', role='tab', data-toggle='tab') Transactions
      if account.isContract
        li(role='presentation')
          a(href='#code', aria-controls='code', role='tab', data-toggle='tab') Code
      if account.source
        li(role='presentation')
          a(href='#source', aria-controls='source', role='tab', data-toggle='tab') Source
        li(role='presentation')
          a(href='#contractState', aria-controls='source', role='tab', data-toggle='tab') Contract State
    .tab-content
      #tracemap.tab-pane.active(role='tabpanel')
        #sample
          #myDiagramDiv(style='border: solid 1px black; width: 100%; height: 1000px')
      #transactions.tab-pane(role='tabpanel')
        h3 Recent Activity 최근 활동 내역
        table.table
          thead
            tr
              th Hash
              th Block
              th Type
              th
              th From
              th To
              th Amount
          tbody
            for block in account.blocks
              for trace in block
                if trace.type === "reward" && trace.action.author === account.address
                  tr
                    td
                      a(href="/block/" + trace.blockNumber) #{trace.blockHash.substr(0, 10)}...
                    td
                      a(href="/block/" + trace.blockNumber) #{trace.blockNumber}
                    if trace.action.rewardType === "uncle"
                      td Mining Reward(Uncle)
                    else
                      td Mining Reward
                    td
                      span.glyphicon.glyphicon-gift(style="color: blue;")
                    td New Coins
                    td 
                      a(href="/account/" + trace.action.author) #{nameformatter.format(trace.action.author)}
                    td #{ethformatter(trace.action.value)}
                else if trace.type !== "reward"
                  tr            
                    td 
                      a(href="/tx/" + trace.transactionHash)  #{trace.transactionHash.substr(0, 10)}...
                    td
                      a(href="/block/" + trace.blockNumber) #{trace.blockNumber}
                    td.capitalize
                      if trace.error
                        span(style="color: red", data-toggle="tooltip", data-placement="left", title=trace.error).glyphicon.glyphicon-warning-sign
                      |  #{trace.type}
                    if trace.type === "call"
                      td
                        if trace.action.from === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                      td 
                        a(href="/account/" + trace.action.to) #{nameformatter.format(trace.action.to)}
                      td #{ethformatter(trace.action.value)}
                    else if trace.type === "create"
                      td
                        if trace.action.from === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href="/account/" + trace.action.from) #{nameformatter.format(trace.action.from)}
                      td
                        a(href="/account/" + trace.result.address) #{nameformatter.format(trace.result.address)}
                      td #{ethformatter(trace.action.value)}
                    else if trace.type === "suicide"
                      td
                        if trace.action.address === account.address
                          span.glyphicon.glyphicon-export(style="color: red;")
                        else
                          span.glyphicon.glyphicon-import(style="color: green;")
                      td
                        a(href="/account/" + trace.action.address) #{nameformatter.format(trace.action.address)}
                      td
                        a(href="/account/" + trace.action.refundAddress) #{nameformatter.format(trace.action.refundAddress)}
                      td #{ethformatter(trace.action.balance)}
      if account.isContract
        #code.tab-pane(role='tabpanel')
          h3 Code
          if !account.source
            a(href="/contract/verify") Upload source
          pre #{account.code}
          if account.wast
            h3 Wast code
            pre #{account.wast}
          h3 Storage
          pre #{JSON.stringify(account.storage)}
      if account.source
        #source.tab-pane(role='tabpanel')
          h4 Source
          pre #{account.source.source}
          h4 ABI
          pre #{account.source.abi}
          h4 Constructor
          pre #{account.source.constructorArgs}
        #contractState.tab-pane(role='tabpanel')
          h4 Current contract state
          table.table
            thead
              tr
                th Function
                th Result
            tbody
              for item in account.contractState
                tr
                  td #{item.name}
                  td #{item.result}
  //script#code
  if account.isContract
    h3 Contract's flow map is not support
  else
    script.
      (function() {
        function async_load() {
          //if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
          var $ = go.GraphObject.make;  // for conciseness in defining templates
          myDiagram = $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
            {
              initialAutoScale: go.Diagram.Uniform,  // an initial automatic zoom-to-fit
              contentAlignment: go.Spot.Center,  // align document to the center of the viewport
              layout:
                $(go.ForceDirectedLayout,  // automatically spread nodes apart
                  { maxIterations: 200, defaultSpringLength: 100, defaultElectricalCharge: 200 })
            });
          // define each Node's appearance
          myDiagram.nodeTemplate = 
            $(go.Node, "Auto",  // the whole node panel
              { locationSpot: go.Spot.Center },
              // define the node's outer shape, which will surround the TextBlock
              $(go.Shape, "RoundedRectangle", { fill: $(go.Brush, "Linear", { 0: "#008cba", 1: "#99d2e5" }), stroke: "#008cba" }),
              $("HyperlinkText",
                function(node) { return node.data.text=="Mining"?"http://pool.sejun.info/":"http://explorer.sejun.info/account/" + node.data.text; },
                function(node) { return node.data.text.substr(0, 10).concat("..."); },
                { font: "bold 10pt helvetica, bold arial, sans-serif", stroke: "white", margin: 4 }
              )
            );
          // replace the default Link template in the linkTemplateMap
          myDiagram.linkTemplate =
            $(go.Link,  // the whole link panel
              { curve: go.Link.Bezier, adjusting: go.Link.Stretch, reshapable: true },
              $(go.Shape,  // the link shape
                { stroke: "gray" }),
              $(go.Shape,  // the arrowhead
                { toArrow: "standard", stroke: null }),
              $(go.TextBlock,  // the label text
                { textAlign: "center", font: "bold 9pt helvetica, arial, sans-serif", stroke: "black", margin: 4, segmentIndex: 2, segmentFraction: 0.2, segmentOffset: new go.Point(0, 10)},
                new go.Binding("text", "text"))
            );
          // create the model for the concept map
          //console.log(!{nodedata});
          //console.log(!{linkdata});
          var nodeDataArray = !{nodedata};
          var linkDataArray = !{linkdata};
          myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
        }
        window.attachEvent ? window.attachEvent('onload', async_load) : window.addEventListener('load', async_load, false);
      })();
